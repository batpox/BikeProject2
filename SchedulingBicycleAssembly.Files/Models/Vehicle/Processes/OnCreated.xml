<Fragment>
  <Process Name="OnCreated" IsOverride="True" ShowAsUserExecutableProcess="False" InterfaceProcessID="Object.OnCreated" BeginStepID="2">
    <Properties />
    <Steps>
      <Step Type="Seize" Name="Vehicle" ExclusionExpression="RoutingType == List.VehicleRoutingType.OnDemand" ID="2">
        <Properties>
          <Property Name="OwnerType">ParentObject</Property>
          <Property Name="ResourceSeizes">
            <Rows>
              <Properties>
                <Property Name="ResourceType">ParentObject</Property>
                <Property Name="SelectionGoal"></Property>
                <Property Name="SelectionValueExpression"></Property>
                <Property Name="RecordResourceCost">False</Property>
                <Property Name="PerUseCostAccrualMethod"></Property>
                <Property Name="RandomNumberStream"></Property>
                <Property Name="SkipSeizeCondition">ResourceState!=List.ResourceStateName.Idle</Property>
              </Properties>
            </Rows>
          </Property>
        </Properties>
        <Exit Name="Exit" Type="Primary" NextID="3" />
      </Step>
      <Step Type="SetRow" Name="ToRouteSequence" ExclusionExpression="RoutingType == List.VehicleRoutingType.OnDemand" ID="3">
        <Properties>
          <Property Name="TableName">RouteSequence</Property>
          <Property Name="ObjectType">ParentObject</Property>
        </Properties>
        <Exit Name="Exit" Type="Primary" NextID="4" />
      </Step>
      <Step Type="SetNode" Name="ToFirstDestination" ExclusionExpression="RoutingType == List.VehicleRoutingType.OnDemand" ID="4">
        <Properties>
          <Property Name="EntityType">ParentObject</Property>
          <Property Name="DestinationType">BySequence</Property>
        </Properties>
        <Exit Name="Exit" Type="Primary" NextID="5" />
      </Step>
      <Step Type="Assign" Name="ToEnableFailures" ExclusionExpression="FailureType == List.VehicleFailureType.NoFailures" ID="5">
        <Properties>
          <Property Name="Assignments">
            <Rows>
              <Properties>
                <Property Name="AssignmentsStateVariableName">
                  <Value>CalendarTimeBasedFailures.Enabled</Value>
                </Property>
                <Property Name="AssignmentsNewValue">Run.RandomnessDisabled==False</Property>
                <Property Name="AssignmentsSkipAssignmentCondition">FailureType!=List.VehicleFailureType.CalendarTimeBased</Property>
              </Properties>
              <Properties>
                <Property Name="AssignmentsStateVariableName">
                  <Value>EventCountBasedFailures.Enabled</Value>
                </Property>
                <Property Name="AssignmentsNewValue">Run.RandomnessDisabled==False</Property>
                <Property Name="AssignmentsSkipAssignmentCondition">FailureType!=List.VehicleFailureType.EventCountBased</Property>
              </Properties>
            </Rows>
          </Property>
        </Properties>
        <Exit Name="Exit" Type="Primary" NextID="6" />
      </Step>
      <Step Type="Subscribe" Name="ToFailureEvents" ExclusionExpression="FailureType == List.VehicleFailureType.NoFailures" ID="6">
        <Properties>
          <Property Name="EventName">CalendarTimeBasedFailures.Event</Property>
          <Property Name="ProcessName">
            <Value>FailureOccurrenceLogic</Value>
          </Property>
          <Property Name="Events">
            <Rows>
              <Properties>
                <Property Name="EventsEventName">EventCountBasedFailures.Event</Property>
                <Property Name="EventsProcessName">
                  <Value>FailureOccurrenceLogic</Value>
                </Property>
              </Properties>
            </Rows>
          </Property>
        </Properties>
        <Exit Name="Exit" Type="Primary" NextID="7" />
      </Step>
      <Step Type="Notify" Name="IfInvalidCapacity" ID="7">
        <Properties>
          <Property Name="NotificationType">Warning</Property>
          <Property Name="MessageHeading">"Invalid resource capacity detected"</Property>
          <Property Name="MessageContent">"Invalid capacity value '" + String.FromReal(Capacity) + "' assigned to resource '" + Name + "'. The value cannot be greater than 1.

The resource's capacity will be automatically adjusted to the maximum allowable value. However, this warning may indicate a problem in the modeled logic."</Property>
          <Property Name="NotifyCondition">Capacity &gt; 1</Property>
        </Properties>
        <Exit Name="Exit" Type="Primary" NextID="8" />
      </Step>
      <Step Type="Assign" Name="OnCreatedAssignments" ID="8">
        <Properties>
          <Property Name="StateVariableName">
            <Value>OnEvaluatingRiderReservation.Enabled</Value>
          </Property>
          <Property Name="NewValue">ResourceState!=List.ResourceStateName.OffShift</Property>
          <Property Name="Assignments">
            <Rows>
              <Properties>
                <Property Name="AssignmentsStateVariableName">
                  <Value>OnEvaluatingRiderReservation.ReturnValue</Value>
                </Property>
                <Property Name="AssignmentsNewValue">ResourceState!=List.ResourceStateName.OffShift</Property>
              </Properties>
              <Properties>
                <Property Name="AssignmentsStateVariableName">
                  <Value>OnEvaluatingSeizeRequest.Enabled</Value>
                </Property>
                <Property Name="AssignmentsNewValue">ResourceState==List.ResourceStateName.Idle</Property>
              </Properties>
              <Properties>
                <Property Name="AssignmentsStateVariableName">
                  <Value>OnEvaluatingSeizeRequest.ReturnValue</Value>
                </Property>
                <Property Name="AssignmentsNewValue">ResourceState==List.ResourceStateName.Idle</Property>
              </Properties>
              <Properties>
                <Property Name="AssignmentsStateVariableName">
                  <Value>OnEvaluatingRiderAtPickup.Enabled</Value>
                </Property>
                <Property Name="AssignmentsNewValue">ResourceState!=List.ResourceStateName.OffShift</Property>
              </Properties>
              <Properties>
                <Property Name="AssignmentsStateVariableName">
                  <Value>OnEvaluatingRiderAtPickup.ReturnValue</Value>
                </Property>
                <Property Name="AssignmentsNewValue">ResourceState!=List.ResourceStateName.OffShift</Property>
              </Properties>
              <Properties>
                <Property Name="AssignmentsStateVariableName">
                  <Value>CurrentCapacity</Value>
                </Property>
                <Property Name="AssignmentsNewValue">1</Property>
                <Property Name="AssignmentsSkipAssignmentCondition">CurrentCapacity &lt;= 1</Property>
              </Properties>
              <Properties>
                <Property Name="AssignmentsStateVariableName">
                  <Value>HomeNode</Value>
                </Property>
                <Property Name="AssignmentsNewValue">InitialNode</Property>
              </Properties>
              <Properties>
                <Property Name="AssignmentsStateVariableName">
                  <Value>MinimumDwellTimeExpirationTimer.Enabled</Value>
                </Property>
                <Property Name="AssignmentsNewValue">True</Property>
                <Property Name="AssignmentsSkipAssignmentCondition">MinimumDwellTimeType!=List.VehicleMinimumDwellTimeType.SpecificTime</Property>
              </Properties>
            </Rows>
          </Property>
        </Properties>
        <Exit Name="Exit" Type="Primary" NextID="9" />
      </Step>
      <Step Type="Decide" Name="IfOnShift" ExclusionExpression="Math.If(OnShiftAddOnProcess.HasValue, 0, 2)" ID="9">
        <Properties>
          <Property Name="DecideType">ConditionBased</Property>
          <Property Name="ConditionOrProbability">ResourceState!=List.ResourceStateName.OffShift</Property>
        </Properties>
        <Exit Name="True" Type="Primary" NextID="12" />
        <Exit Name="False" Type="Alternate" NextID="10" />
      </Step>
      <Step Type="Decide" Name="IfOffShift" ExclusionExpression="Math.If(OffShiftAddOnProcess.HasValue, 0, 2)" ID="10">
        <Properties>
          <Property Name="DecideType">ConditionBased</Property>
          <Property Name="ConditionOrProbability">ResourceState==List.ResourceStateName.OffShift</Property>
        </Properties>
        <Exit Name="True" Type="Primary" NextID="11" />
      </Step>
      <Step Type="Execute" Name="OffShiftAddOnProcess" ID="11">
        <Properties>
          <Property Name="ProcessName">
            <Value>OffShiftAddOnProcess</Value>
          </Property>
        </Properties>
      </Step>
      <Step Type="Execute" Name="OnShiftAddOnProcess" ID="12">
        <Properties>
          <Property Name="ProcessName">
            <Value>OnShiftAddOnProcess</Value>
          </Property>
        </Properties>
      </Step>
    </Steps>
  </Process>
</Fragment>